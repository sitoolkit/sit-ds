version: "3.7"
services:

  ldap:
    environment:
      LDAP_ADMIN_PASSWORD: ${LDAP_MANAGER_PASSWORD}
      LDAP_ORGANISATION: ${LDAP_ORGANISATION}
      LDAP_DOMAIN: ${LDAP_DOMAIN}
      TZ: ${OS_TIMEZONE}
    image: osixia/openldap:${VERSION_LDAP}
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_conf:/etc/ldap/slapd.d
    restart: always
    healthcheck:
      test: "ldapwhoami -xH ldapi:// || exit 1"

  ldapadmin:
    depends_on:
      - ldap
    image : osixia/phpldapadmin:${VERSION_LDAPADMIN}
    ports:
      - ${LDAPADMIN_PORT}:443
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: ${LDAP_HOST}
      TZ: ${OS_TIMEZONE}
    restart: always
    healthcheck:
      test: "[ $$(pgrep -u www-data -c -f /usr/sbin/apache2) -gt 0 ] || exit 1"

  smtp:
    environment:
      MAIL_RELAY_HOST: ${MAIL_RELAY_HOST}
      MAIL_RELAY_PORT: ${MAIL_RELAY_PORT}
      MAIL_RELAY_USER: ${MAIL_RELAY_USER}
      MAIL_RELAY_PASS: ${MAIL_RELAY_PASS}
      TZ: ${OS_TIMEZONE}
    image: tecnativa/postfix-relay
    restart: always
    healthcheck:
      test: "echo | openssl s_client -verify_quiet -connect localhost:${SMTP_PORT} -starttls smtp 2>/dev/null || exit 1"

  passchg:
    build:
      context: ./service/ssp
      args:
        VERSION: ${VERSION_PASSCHG}
    depends_on:
      - ldap
      - smtp
    env_file:
      - .env
    environment:
      MAIL_SMTP_HOST: smtp
      LDAP_URL: ldap://${LDAP_HOST}
      TZ: ${OS_TIMEZONE}
    ports:
      - ${PASSCHG_PORT}:80
    restart: always
    healthcheck:
      test: "curl -sf localhost || exit 1"
      interval: 5s
      retries: 100

  kvs:
    environment:
      TZ: ${OS_TIMEZONE}
    image: redis:${VERSION_KVS}
    restart: always
    healthcheck:
      test: "redis-cli ping"

  dbms:
    image: postgres:${VERSION_DBMS}
    environment:
      TZ: ${OS_TIMEZONE}
      PGPORT: ${DB_PORT}
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: --auth-host=md5
    restart: always
    volumes:
      - ./service/postgres/mount:/docker-entrypoint-initdb.d
      - dbms_data:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -d postgres -U postgres"

  scm:
    env_file:
      - .env
    build:
      context: ./service/gitbucket
      args:
        VERSION: ${VERSION_SCM}
    depends_on:
      - ldap
      - smtp
      - dbms
      - kvs
    environment:
      GITBUCKET_DB_URL: ${DB_JDBC_URL}/gitbucket
      GITBUCKET_DB_USER: gitbucket
      GITBUCKET_DB_PASSWORD: gitbucket
      MAIL_SMTP_HOST: smtp
      TZ: ${OS_TIMEZONE}
    # ports:
    #   - 8081:8080
    restart: always
    volumes:
      - scm_data:/etc/gitbucket
    healthcheck:
      test: "curl -sf localhost:8080/signin || exit 1"
      interval: 5s
      retries: 100

  ci:
    build:
      context: ./service/jenkins
      args:
        VERSION: ${VERSION_CI}
    depends_on:
      - ldap
      - smtp
    env_file:
      - .env
    environment:
      MAIL_SMTP_HOST: smtp
      TZ: ${OS_TIMEZONE}
    ports:
      # - 8082:8080
      - ${CI_SLAVE_AGENT_PORT}:50000
    restart: always
    volumes:
      - ci_data:/var/jenkins_home
    healthcheck:
      test: "curl -sf localhost:8080/jenkins/ || exit 1"
      interval: 5s
      retries: 100

  sca:
    build:
      context: ./service/sonarqube
      args:
        VERSION: ${VERSION_SCA}
    depends_on:
      - ldap
      - dbms
    env_file:
      - .env
    environment:
      SONARQUBE_JDBC_USERNAME: sonarqube
      SONARQUBE_JDBC_PASSWORD: sonarqube
      SONARQUBE_JDBC_URL: ${DB_JDBC_URL}/sonarqube
      TZ: ${OS_TIMEZONE}
    # ports:
    #   - 9000:9000
    restart: always
    volumes:
      - sca_data:/opt/sonarqube/data
    healthcheck:
      test: "curl -sf localhost:9000/sonarqube/ || exit 1"
      interval: 5s
      retries: 100

  its:
    build:
      context: ./service/redmine
      args:
        VERSION: ${VERSION_ITS}
    depends_on:
      - dbms
      - ldap
      - smtp
    env_file:
      - .env
    environment:
      REDMINE_DB_POSTGRES: ${DB_HOST}
      REDMINE_DB_PORT: ${DB_PORT}
      REDMINE_DB_USERNAME: redmine
      REDMINE_DB_PASSWORD: redmine
      REDMINE_DB_DATABASE: redmine
      RAILS_RELATIVE_URL_ROOT: /redmine
      MAIL_SMTP_HOST: smtp
      TZ: ${OS_TIMEZONE}
    # ports:
    #   - 3000:3000
    restart: always
    volumes:
      - its_data:/usr/src/redmine/files
    healthcheck:
      test: "wget localhost:3000/redmine -O /dev/null -t 1 || exit 1"
      interval: 5s
      retries: 100

  arm:
    image: sonatype/nexus3:${VERSION_ARM}
    depends_on:
      - ldap
    environment:
      TZ: ${OS_TIMEZONE}
    ports:
      - ${NEXUS_DOCKER_PORT}:${NEXUS_DOCKER_PORT}
    volumes:
      - arm_data:/nexus-data
    entrypoint: >
      bash -c 
      "echo -n ${LDAP_MANAGER_PASSWORD} > /nexus-data/admin.password &&
      /opt/sonatype/nexus/bin/nexus run"
    restart: always
    healthcheck:
      test: "curl -sf localhost:8081 || exit 1"
      interval: 5s
      retries: 100

  proxy:
    build:
      context: ./service/nginx
      args:
        VERSION: ${VERSION_PROXY}
    depends_on:
      arm:
        condition: service_healthy
      ci:
        condition: service_healthy
      its:
        condition: service_healthy
      sca:
        condition: service_healthy
      scm:
        condition: service_healthy
      passchg:
        condition: service_healthy
      wiki:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - ${PROXY_PORT}:${PROXY_PORT}
    restart: always

  work:
    build:
      context: ./service/work
      args:
        VERSION: ${VERSION_WORK}
    env_file:
      - .env
    environment:
        TZ: ${OS_TIMEZONE}
    volumes:
      - ./service/work/mount:/mnt
    restart: always

  e2etest:
    build:
      context: ./e2etest
      args:
        VERSION: ${VERSION_UBUNTU}
    env_file:
      - .env
    environment:
        TZ: ${OS_TIMEZONE}
    volumes:
      - ./e2etest:/mnt
    working_dir: /mnt
    restart: always

  wiki:
    env_file:
      - .env
    image: requarks/wiki:${VERSION_WIKI}
    depends_on:
      - ldap
      - dbms
      - search-engine
    environment:
      DB_TYPE: postgres
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: wikijs
      DB_PASS: wikijs
      DB_NAME: wikijs
      TZ: ${OS_TIMEZONE}
    volumes:
      - wiki_data:/wiki
    healthcheck:
      test: "curl -sf localhost:3000 || exit 1"
      interval: 5s
      retries: 100

  search-engine:
    env_file:
      - .env
    image: docker.elastic.co/elasticsearch/elasticsearch:${VERSION_ES}
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - search_engine_data:/usr/share/elasticsearch/data
    entrypoint: >
      bash -c "elasticsearch-plugin install analysis-kuromoji && docker-entrypoint.sh"
    healthcheck:
      test: "curl -sf localhost:9200 || exit 1"
      interval: 5s
      retries: 100

volumes:
  ci_data:
  dbms_data:
  its_data:
  ldap_conf:
  ldap_data:
  sca_data:
  scm_data:
  arm_data:
  wiki_data:
  search_engine_data:
