version: "3.7"
services:

  ldap:
    environment:
      LDAP_ADMIN_PASSWORD: ${LDAP_MANAGER_PASSWORD}
      LDAP_ORGANISATION: ${LDAP_ORGANISATION}
      LDAP_DOMAIN: ${LDAP_DOMAIN}
      TZ: ${OS_TIMEZONE}
    image: osixia/openldap:${VERSION_LDAP}
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_conf:/etc/ldap/slapd.d
    restart: always

  ldapadmin:
    depends_on:
      - ldap
    image : osixia/phpldapadmin:${VERSION_LDAPADMIN}
    ports:
      - ${LDAPADMIN_PORT}:443
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: ${LDAP_HOST}
      TZ: ${OS_TIMEZONE}
    restart: always

  smtp:
    environment:
      MAIL_RELAY_HOST: ${MAIL_RELAY_HOST}
      MAIL_RELAY_PORT: ${MAIL_RELAY_PORT}
      MAIL_RELAY_USER: ${MAIL_RELAY_USER}
      MAIL_RELAY_PASS: ${MAIL_RELAY_PASS}
      TZ: ${OS_TIMEZONE}
    image: tecnativa/postfix-relay
    restart: always

  passchg:
    build:
      context: ./service/ssp
      args:
        VERSION: ${VERSION_PASSCHG}
    depends_on:
      - ldap
      - smtp
    env_file:
      - .env
    environment:
      MAIL_SMTP_HOST: smtp
      LDAP_URL: ldap://${LDAP_HOST}
      TZ: ${OS_TIMEZONE}
    ports:
      - ${PASSCHG_PORT}:80
    restart: always

  kvs:
    environment:
      TZ: ${OS_TIMEZONE}
    image: redis:${VERSION_KVS}
    restart: always

  dbms:
    image: postgres:${VERSION_DBMS}
    environment:
      TZ: ${OS_TIMEZONE}
      PGPORT: ${DB_PORT}
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: --auth-host=md5
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      - ./service/postgres/mount:/docker-entrypoint-initdb.d
      - dbms_data:/var/lib/postgresql/data

  scm:
    image: gitlab/gitlab-ce:${VERSION_SCM}
    restart: always
    depends_on:
      - ldap
      - smtp
      - dbms
      - kvs
    env_file:
      - .env
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url '${PUBLIC_PROTOCOL}://scm.${PUBLIC_HOST}'
        nginx['listen_port'] = ${GITLAB_PROXY_PORT}
        # ldap
        gitlab_rails['ldap_enabled'] = true
        gitlab_rails['ldap_servers'] = {
          'main' => {
            'label' => 'LDAP',
            'host' => '${LDAP_HOST}',
            'port' => '${LDAP_PORT}',
            'uid' => '${LDAP_LOGIN_ATTRIBUTE}',
            'encryption' => 'plain',
            'bind_dn' => '${LDAP_MANAGER_DN}',
            'password' => '${LDAP_MANAGER_PASSWORD}',
            'base' => '${LDAP_ROOT_DN}',
            'attributes' => {
              'username' => ['uid', 'userid', '${LDAP_LOGIN_ATTRIBUTE}'],
              'email' => ['mail', 'email', '${LDAP_MAIL_ATTRIBUTE}'],
              'name' => '${LDAP_LOGIN_ATTRIBUTE}',
              'first_name' => 'givenName',
              'last_name' => '${LDAP_LOGIN_ATTRIBUTE}',
            },
            'lowercase_usernames' => false,
          }
        }
        # smtp
        gitlab_rails['smtp_enable'] = true
        gitlab_rails['smtp_port'] = '${SMTP_PORT}'
        gitlab_rails['smtp_address'] = 'smtp'
        gitlab_rails['gitlab_email_from'] = 'gitlab@${GITLAB_SMTP_DOMAIN}'
        gitlab_rails['gitlab_email_reply_to'] = '${MAIL_RELAY_USER}'
        # dbms
        postgresql['enable'] = false
        gitlab_rails['db_adapter'] = 'postgresql'
        gitlab_rails['db_encoding'] = 'utf8'
        gitlab_rails['db_host'] = '${DB_HOST}'
        gitlab_rails['db_port'] = '${DB_PORT}'
        gitlab_rails['db_username'] = 'gitlab'
        gitlab_rails['db_password'] = 'gitlab'
        gitlab_rails['db_database'] = 'gitlab'
    volumes:
      - 'scm_config:/etc/gitlab'
      - 'scm_data:/var/opt/gitlab'

  ci:
    build:
      context: ./service/jenkins
      args:
        VERSION: ${VERSION_CI}
    depends_on:
      - ldap
      - smtp
    env_file:
      - .env
    environment:
      MAIL_SMTP_HOST: smtp
      TZ: ${OS_TIMEZONE}
    ports:
      # - 8082:8080
      - ${CI_SLAVE_AGENT_PORT}:50000
    restart: always
    volumes:
      - ci_data:/var/jenkins_home

  sca:
    build:
      context: ./service/sonarqube
      args:
        VERSION: ${VERSION_SCA}
    depends_on:
      - ldap
      - dbms
    env_file:
      - .env
    environment:
      SONARQUBE_JDBC_USERNAME: sonarqube
      SONARQUBE_JDBC_PASSWORD: sonarqube
      SONARQUBE_JDBC_URL: ${DB_JDBC_URL}/sonarqube
      TZ: ${OS_TIMEZONE}
    # ports:
    #   - 9000:9000
    restart: always
    volumes:
      - sca_data:/opt/sonarqube/data

  its:
    build:
      context: ./service/redmine
      args:
        VERSION: ${VERSION_ITS}
    depends_on:
      - dbms
      - ldap
      - smtp
    env_file:
      - .env
    environment:
      REDMINE_DB_POSTGRES: ${DB_HOST}
      REDMINE_DB_PORT: ${DB_PORT}
      REDMINE_DB_USERNAME: redmine
      REDMINE_DB_PASSWORD: redmine
      REDMINE_DB_DATABASE: redmine
      RAILS_RELATIVE_URL_ROOT: /redmine
      MAIL_SMTP_HOST: smtp
      TZ: ${OS_TIMEZONE}
    # ports:
    #   - 3000:3000
    restart: always
    volumes:
      - its_data:/usr/src/redmine/files

  arm:
    build:
      context: ./service/artifactory
      args:
        VERSION_ARM: ${VERSION_ARM}
        VERSION_UBUNTU: ${VERSION_UBUNTU}
    depends_on:
      - ldap
      - dbms
    env_file:
      - .env
    environment:
      TZ: ${OS_TIMEZONE}
      DB_TYPE: postgresql
      DB_URL: ${DB_JDBC_URL}/artifactory
      DB_USER: artifactory
      DB_PASSWORD: artifactory
    volumes:
      - arm_data:/var/opt/jfrog/artifactory
    restart: always

  proxy:
    build:
      context: ./service/nginx
      args:
        VERSION: ${VERSION_PROXY}
    depends_on:
      - scm
      - ci
      - sca
      - its
      - arm
      - wiki
    env_file:
      - .env
    ports:
      - ${PROXY_PORT}:${PROXY_PORT}
    restart: always

  work:
    build:
      context: ./service/work
      args:
        VERSION: ${VERSION_WORK}
    env_file:
      - .env
    environment:
        TZ: ${OS_TIMEZONE}
    volumes:
      - ./service/work/mount:/mnt
    restart: always

  e2etest:
    build:
      context: ./e2etest
      args:
        VERSION: ${VERSION_UBUNTU}
    env_file:
      - .env
    environment:
        TZ: ${OS_TIMEZONE}
    volumes:
      - ./e2etest:/mnt
    working_dir: /mnt
    restart: always

  wiki:
    env_file:
      - .env
    image: requarks/wiki:${VERSION_WIKI}
    depends_on:
      - ldap
      - dbms
      - search-engine
    environment:
      DB_TYPE: postgres
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: wikijs
      DB_PASS: wikijs
      DB_NAME: wikijs
      TZ: ${OS_TIMEZONE}
    volumes:
      - wiki_data:/wiki

  search-engine:
    env_file:
      - .env
    image: docker.elastic.co/elasticsearch/elasticsearch:${VERSION_ES}
    environment:
      discovery.type: single-node
    volumes:
      - search_engine_data:/usr/share/elasticsearch/data
    entrypoint: >
      bash -c "elasticsearch-plugin install analysis-kuromoji && docker-entrypoint.sh"

volumes:
  ci_data:
  dbms_data:
  its_data:
  ldap_conf:
  ldap_data:
  sca_data:
  scm_data:
  scm_config:
  arm_data:
  wiki_data:
  search_engine_data:
